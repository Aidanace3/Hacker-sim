#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>
#include <random>
#include <algorithm>
#include <thread>
#include <chrono>

class HackerApp {
public:
    HackerApp() {
        banned = false;
        banEndTime = 0;
        chanceMultiplier = 1;
        popularityCount = 0;
    }

    void simulateEnter() {
        while (true) {
            executeCommand();
            displayRandomBinary();
        }
    }

private:
    bool banned;
    std::time_t banEndTime;
    int chanceMultiplier;
    std::mt19937 randomEngine;
    int popularityCount;

    void executeCommand() {
        std::string command;
        std::cout << "Enter a command: ";
        std::getline(std::cin, command);

        if (banned && std::time(nullptr) < banEndTime) {
            if (command == "dox") {
                showBanPopup("You are banned and cannot use 'dox' until the ban period ends.");
                return;
            }
        }

        if (command == "dox") {
            if (randomEngine() % 2 == 0) {
                std::cout << "You gained popularity!" << std::endl;
                popularityCount++;
            } else {
                std::cout << "You've been banned for 1 day." << std::endl;
                banned = true;
                banEndTime = std::time(nullptr) + 86400; // 1 day in seconds
            }
        } else if (command == "popcheck") {
            std::cout << "Popularity: " << popularityCount << std::endl;
        } else if (isValidID(command)) {
            std::cout << "Name: " << generateRandomNameWithID(command) << std::endl;
        } else if (command == "getip") {
            std::cout << "IP: " << generateFakeIP() << std::endl;
        } else if (isValidFakeIP(command)) {
            std::cout << "Location: " << generateFakeLocation() << std::endl;
        } else if (command == "help") {
            std::cout << "dox: get 1 pop, may get banned\ndoip: gets fake ip\nany 7 digit code: gives you the corresponding name" << std::endl;
        } else {
            showInvalidInputPopup();
        }
    }

    void displayRandomBinary() {
        for (int i = 0; i < 12; ++i) {
            std::cout << (randomEngine() % 2);
            std::this_thread::sleep_for(std::chrono::milliseconds(500));
        }
        std::cout << std::endl;
    }

    std::string generateFakeIP() {
        return std::to_string(randomEngine() % 255 + 1) + "." +
               std::to_string(randomEngine() % 256) + "." +
               std::to_string(randomEngine() % 256) + "." +
               std::to_string(randomEngine() % 255 + 1);
    }

    std::string generateFakeLocation() {
        std::vector<std::string> cities = { "New York", "Los Angeles", "Chicago", "Houston", "Miami" };
        std::vector<std::string> states = { "NY", "CA", "IL", "TX", "FL" };
        return cities[randomEngine() % cities.size()] + ", " + states[randomEngine() % states.size()];
    }

    bool isValidFakeIP(const std::string &ip) {
        size_t dots = std::count(ip.begin(), ip.end(), '.');
        if (dots != 3)
            return false;

        size_t start = 0;
        size_t end = ip.find('.');
        for (int i = 0; i < 4; ++i) {
            std::string part = ip.substr(start, end - start);
            try {
                int num = std::stoi(part);
                if (num < 0 || num > 255)
                    return false;
            } catch (...) {
                return false;
            }
            start = end + 1;
            end = ip.find('.', start);
            if (end == std::string::npos && i < 3)
                return false;
        }

        return true;
    }

    bool isValidID(const std::string &id) {
        return id.size() == 7 && std::all_of(id.begin(), id.end(), [](char c) { return std::isalnum(c); });
    }

    std::string generateRandomNameWithID(const std::string &id) {
        std::seed_seq seed(id.begin(), id.end());
        randomEngine.seed(seed);
        std::vector<std::string> first
